{"mappings":"AASA,SAASA,EAAKC,EAAKC,GACf,IACIC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,G,CAC3C,MAAOK,GACLC,QAAQD,MAAM,oBAAqBA,EAAME,KAAMF,EAAMG,Q,EAS7D,SAASC,EAAKV,GACV,IACI,OAASE,aAAaS,QAAQX,GAExBI,KAAKQ,MAAMV,aAAaS,QAAQX,SADhCa,C,CAER,MAAOP,GACLC,QAAQD,MAAM,oBAAqBA,EAAME,KAAMF,EAAMG,Q,ECzB7D,IAAIK,EAAY,EAEhB,MAAMC,EAAUC,SAASC,eAAe,WAmDxC,SAASC,EAASC,EAAMC,GAAS,EAAOC,EAAKP,GACzC,MAAMQ,EAAON,SAASO,cAAc,MAC9BC,EAASR,SAASS,eAAeN,GACvCG,EAAKI,YAAYF,GACjBF,EAAKK,QAAQN,GAAKA,EACdD,GAAQE,EAAKM,UAAUC,IAAI,WAC/BC,KAAKJ,YAAYJ,GA4CrB,SAAkBS,GACd,MAAMC,EAAOhB,SAASO,cAAc,QAC9BU,EAAMjB,SAASS,eAAe,KACpCO,EAAKE,UAAY,QACjBF,EAAKN,YAAYO,GACjBF,EAAOL,YAAYM,E,CA/CnBG,CAASb,E,CAqDb,SAASc,EAAiBjB,EAAMC,GAC5B,MAAO,C,KACHD,E,OACAC,EACAC,GAAIP,E,CCvHZ,MAAMuB,EAASrB,SAASC,eAAe,UACjCqB,EAAOtB,SAASC,eAAe,QAErCoB,EAAOE,iBAAiB,SD8BxB,WACI,MAAMC,EAAazB,EAAQd,MAAMwC,OAC5BD,GAILtB,EAASsB,GACTzB,EAAQd,MAAQ,GA2FpB,SAA0BkB,EAAMC,GAAS,GACrC,MAAMsB,EAAehC,EApIL,SAqIXgC,GAGDA,EAAaC,KAAKP,EAAiBjB,EAAMC,IACzCrB,EAzIY,QAyIM2C,IAHlB3C,EAtIY,QAsIM,CAACqC,EAAiBjB,EAAMC,KAK9CN,GAAa,C,CAlGb8B,CAAiBJ,IALbK,MAAM,4B,IChCdP,EAAKC,iBAAiB,SD8EtB,UAA6BR,OAAEA,IAC3B,MAAMW,EAAehC,EAnFL,SAoFVoC,EAAYJ,EAAaK,WAAUC,GAAQC,OAAOD,EAAK3B,MAAQ4B,OAAOlB,EAAOJ,QAAQN,MAEpE,OAAnBU,EAAOmB,SACPnB,EAAOH,UAAUuB,OAAO,WACxBT,EAAaI,GAAW1B,QAAUsB,EAAaI,GAAW1B,QACnDW,EAAOH,UAAUwB,SAAS,WACjCrB,EAAOsB,WAAWC,SAClBZ,EAAaa,OAAOT,EAAW,IAEnC/C,EA7FgB,QA6FE2C,E,ICxFtBc,OAAOjB,iBAAiB,oBDQxB,WACI,MAAMG,EAAehC,EAdL,SAeZgC,IACAA,EAAae,SAAQ,EAACtC,KAAEA,EAAIC,OAAEA,EAAMC,GAAEA,KAASH,EAASC,EAAMC,EAAQC,KAEtEP,EACI4B,EAAagB,OACPhB,EAAaA,EAAagB,OAAS,GAAGrC,GAAK,EAC3C,E","sources":["src/js/storage.js","src/js/04-todolist-functions.js","src/js/04-todolist-script.js"],"sourcesContent":["// Сервис для localStorage\n// Для того чтобы сократить количество повторяющегося кода при работе с веб - хранилищем,\n// можно написать сервис с стандартными методами, например save и load.\n// Они будут абстрагировать повторяющийся код проверки ошибок парса и тому подобную рутину.\n\n/*\nlocalStorage.setItem(key, value) - делает новую, или обновляет уже существующую запись в хранилище.\nJSON.stringify(value) - Принимает значение и преобразовывает его в JSON (строку). Значением может быть число, буль, null, массив или обьект\n */\nfunction save(key, value) {\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n        console.error(\"Set state error: \", error.name, error.message);\n    }\n};\n\n\n/*\nМетод localStorage.getItem(key) позволяет прочитать из хранилища запись с ключом key. Если в хранилище нет записи с таким ключом, метод возвращает null\nJSON.parse() -получает (парсит) из JSON валидное JavaScript значение. Это операция обратная преобразованию в строку (stringify)\n */\nfunction load(key) {\n    try {\n        return (!localStorage.getItem(key))\n            ? undefined\n            : JSON.parse(localStorage.getItem(key));\n    } catch (error) {\n        console.error(\"Get state error: \", error.name, error.message);\n    }\n};\n\nexport { save, load };","import { save, load } from \"./storage.js\";\n\nconst STORAGE_KEY = \"tasks\";\nlet currentId = 0;\n\nconst myInput = document.getElementById(\"myInput\");\n\n/*\nФункция заполняет список задач\nзагружаем в переменную currentState текущее состояние локалсторадж (массив)\n если массив непустой то перебираем его методом forEach и на каждой итерации создаем li и добавляем её в DOM\nОбновляем переменную currentId в глобальной области видимости по тернарнику - \n если массив непустой то обращаемся к id последнего элемента массива и добавляем к нему 1\n если пустой то присваиваем 0\n*/\nfunction fillTasksList() {\n    const currentState = load(STORAGE_KEY);\n    if (currentState) {\n        currentState.forEach(({ text, isDone, id }) => createLI(text, isDone, id));\n\n        currentId =\n            currentState.length\n                ? currentState[currentState.length - 1].id + 1\n                : 0;\n    }\n}\n\n/*\nФункция добавляет таску в DOM из инпута\nзагружаем в переменную inputValue результат инпута \n---Метод trim() удаляет пробельные символы с начала и конца строки\n  Если инпут пуст то выдаем алерт alert(\"You must write something!\") и выходим из функции\nдобавляем li из инпута, очищаем инпут \nдобавляет задачу в локалсторадж addTaskToStorage(inputValue)\n*/\nfunction addNewTask() {\n    const inputValue = myInput.value.trim();\n    if (!inputValue) {\n        alert(\"You must write something!\");\n        return;\n    }\n    createLI(inputValue);\n    myInput.value = \"\";\n    addTaskToStorage(inputValue);\n}\n\n/*\nФункция создаёт li и добавляет её в DOM\n---createElement(tag) – создаёт элемент с заданным тегом, document\n---createTextNode() позволяет создать и вернуть текстовый узел с указанным текстом.\n---Свойство dataset позволяет считывать или устанавливать любые дата-атрибуты на HTML-элементе.\n---Дата-атрибут — это пользовательский атрибут на элементе, название которого начинается с data-\n---В свойстве classList хранится объект с методами для работы с классами элемента.\n---elem.classList.add(cls) - добавляет класс cls в список классов элемента.\n---appendChild() добавляет узел в конец списка дочерних элементов указанного родительского узла\n */\nfunction createLI(text, isDone = false, id = currentId) {\n    const liEL = document.createElement(\"LI\");\n    const liText = document.createTextNode(text);\n    liEL.appendChild(liText);\n    liEL.dataset.id = id;\n    if (isDone) liEL.classList.add(\"checked\");\n    myUL.appendChild(liEL);\n\n    addCross(liEL);\n}\n\n/*\nФункция описывает поведение таски при кликах на саму таску и на крестик\nпринимает event и деструктуризирует из него { target }\n---event.target - это ссылка на исходный элемент на котором произошло событие, в процессе всплытия он неизменен.\nзагружаем в переменную currentState текущее состояние локалсторадж (массив)\nзагружаем в переменную taskIndex результат выполения метода findIndex на массиве currentState (id текущей таски)\n---Свойство tagName объекта Element возвращает имя тега элемента, на котором он вызывается\n  Если это \"LI\" то тогглим класс \"checked\" на текущей таске и меняем буль в isDone на противоположное значение\n  Иначе если текущий элемент содержит класс \"close\" то 1) удаляем li из DOM 2)удаляем элемент из массива currentState\nЗаписываем в локалсторадж массив currentState\n---В свойстве classList хранится объект с методами для работы с классами элемента.\n---classList – объект с методами add/remove/toggle/contains , удобно для управления отдельными классами\n---elem.classList.contains(cls) - возвращает true или false в зависимости от того, есть ли у элемента класс cls.\n---elem.classList.toggle(\"class\") – добавить класс, если его нет, иначе удалить\n---Свойство parentNode возвращает узел, который является родителем данного узла\n---Метод Element.remove() удаляет элемент из DOM-дерева, в котором он находится\n*/\nfunction handleTaskBehaviour({ target }) {\n    const currentState = load(STORAGE_KEY);\n    const taskIndex = currentState.findIndex(task => Number(task.id) === Number(target.dataset.id));\n\n    if (target.tagName === \"LI\") {\n        target.classList.toggle(\"checked\");\n        currentState[taskIndex].isDone = !currentState[taskIndex].isDone;\n    } else if (target.classList.contains(\"close\")) {\n        target.parentNode.remove();\n        currentState.splice(taskIndex, 1);\n    }\n    save(STORAGE_KEY, currentState);\n}\n\n/*\n---event.target - это ссылка на исходный элемент на котором произошло событие, в процессе всплытия он неизменен.\n---createElement(tag) – создаёт элемент с заданным тегом\n---createTextNode() позволяет создать и вернуть текстовый узел с указанным текстом.\n---className – строковое значение, удобно для управления всем набором классов.\n---classList – объект с методами add/remove/toggle/contains , удобно для управления отдельными классами\n---appendChild() добавляет узел в конец списка дочерних элементов указанного родительского узла\n */\nfunction addCross(target) {\n    const span = document.createElement(\"SPAN\");\n    const txt = document.createTextNode(\"\\u00D7\");\n    span.className = \"close\";\n    span.appendChild(txt);\n    target.appendChild(span);\n}\n\n/*\nФункция возвращает обьект со свойствами text,isDone,id\n */\nfunction createTaskObject(text, isDone) {\n    return {\n        text,\n        isDone,\n        id: currentId,\n    };\n}\n\n/*\nФункция добавляет задачу в локалсторадж\nзагружает в переменную currentState текущее состояние локалсторадж\nЕсли в локалсторадж ничего нет то добавляет запись по ключу STORAGE_KEY, создавая пустой массив \n и добавляя в него результат вызова функции createTaskObject(text, isDone)\nЕсли есть то пушит в массив currentState результат вызова функции createTaskObject(text, isDone)\nУвеличивает на 1 переменную currentId в глобальной области видимости\n */\nfunction addTaskToStorage(text, isDone = false) {\n    const currentState = load(STORAGE_KEY);\n    if (!currentState) {\n        save(STORAGE_KEY, [createTaskObject(text, isDone)]);\n    } else {\n        currentState.push(createTaskObject(text, isDone));\n        save(STORAGE_KEY, currentState);\n    }\n    currentId += 1;\n}\n\nexport { addNewTask, handleTaskBehaviour, fillTasksList };\n","import { addNewTask, handleTaskBehaviour, fillTasksList } from \"./04-todolist-functions.js\";\n\nconst addBtn = document.getElementById(\"addBtn\");\nconst myUL = document.getElementById(\"myUL\");\n\naddBtn.addEventListener(\"click\", addNewTask);\nmyUL.addEventListener(\"click\", handleTaskBehaviour);\nwindow.addEventListener(\"DOMContentLoaded\", fillTasksList)\n\n// Событие DOMContentLoaded происходит когда весь HTML был полностью загружен и пройден парсером,\n// не дожидаясь окончания загрузки таблиц стилей, изображений и фреймов.\n// Значительно отличающееся от него событие load(en - US) используется для отслеживания только полностью загруженной страницы."],"names":["$3fff5e8daf4b13a6$export$a1544dad697b423d","key","value","localStorage","setItem","JSON","stringify","error","console","name","message","$3fff5e8daf4b13a6$export$11e63f7b0f3d9900","getItem","parse","undefined","$67737e069606351b$var$currentId","$67737e069606351b$var$myInput","document","getElementById","$67737e069606351b$var$createLI","text","isDone","id","liEL","createElement","liText","createTextNode","appendChild","dataset","classList","add","myUL","target","span","txt","className","$67737e069606351b$var$addCross","$67737e069606351b$var$createTaskObject","$2118fc0d7022a502$var$addBtn","$2118fc0d7022a502$var$myUL","addEventListener","inputValue","trim","currentState","push","$67737e069606351b$var$addTaskToStorage","alert","taskIndex","findIndex","task","Number","tagName","toggle","contains","parentNode","remove","splice","window","forEach","length"],"version":3,"file":"04-todolist.09f8f24a.js.map"}